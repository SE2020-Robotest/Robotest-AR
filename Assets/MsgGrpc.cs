// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/msg.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Msg {
  public static partial class MsgServices
  {
    static readonly string __ServiceName = "msg.MsgServices";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Msg.Map> __Marshaller_msg_Map = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.Map.Parser));
    static readonly grpc::Marshaller<global::Msg.Response> __Marshaller_msg_Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.Response.Parser));
    static readonly grpc::Marshaller<global::Msg.RBPosition> __Marshaller_msg_RBPosition = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.RBPosition.Parser));
    static readonly grpc::Marshaller<global::Msg.RBPath> __Marshaller_msg_RBPath = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.RBPath.Parser));
    static readonly grpc::Marshaller<global::Msg.VoiceData> __Marshaller_msg_VoiceData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.VoiceData.Parser));
    static readonly grpc::Marshaller<global::Msg.VoiceStr> __Marshaller_msg_VoiceStr = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.VoiceStr.Parser));
    static readonly grpc::Marshaller<global::Msg.ControlCmd> __Marshaller_msg_ControlCmd = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Msg.ControlCmd.Parser));

    static readonly grpc::Method<global::Msg.Map, global::Msg.Response> __Method_ConfigMap = new grpc::Method<global::Msg.Map, global::Msg.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigMap",
        __Marshaller_msg_Map,
        __Marshaller_msg_Response);

    static readonly grpc::Method<global::Msg.RBPosition, global::Msg.Response> __Method_RobotPosition = new grpc::Method<global::Msg.RBPosition, global::Msg.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RobotPosition",
        __Marshaller_msg_RBPosition,
        __Marshaller_msg_Response);

    static readonly grpc::Method<global::Msg.RBPath, global::Msg.Response> __Method_RobotPath = new grpc::Method<global::Msg.RBPath, global::Msg.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RobotPath",
        __Marshaller_msg_RBPath,
        __Marshaller_msg_Response);

    static readonly grpc::Method<global::Msg.VoiceData, global::Msg.Response> __Method_SendVoiceFile = new grpc::Method<global::Msg.VoiceData, global::Msg.Response>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SendVoiceFile",
        __Marshaller_msg_VoiceData,
        __Marshaller_msg_Response);

    static readonly grpc::Method<global::Msg.VoiceStr, global::Msg.Response> __Method_VoiceResult = new grpc::Method<global::Msg.VoiceStr, global::Msg.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoiceResult",
        __Marshaller_msg_VoiceStr,
        __Marshaller_msg_Response);

    static readonly grpc::Method<global::Msg.ControlCmd, global::Msg.Response> __Method_ControlCommand = new grpc::Method<global::Msg.ControlCmd, global::Msg.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ControlCommand",
        __Marshaller_msg_ControlCmd,
        __Marshaller_msg_Response);

    static readonly grpc::Method<global::Msg.Response, global::Msg.Response> __Method_RobotFinished = new grpc::Method<global::Msg.Response, global::Msg.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RobotFinished",
        __Marshaller_msg_Response,
        __Marshaller_msg_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Msg.MsgReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MsgServices</summary>
    [grpc::BindServiceMethod(typeof(MsgServices), "BindService")]
    public abstract partial class MsgServicesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> ConfigMap(global::Msg.Map request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> RobotPosition(global::Msg.RBPosition request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> RobotPath(global::Msg.RBPath request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> SendVoiceFile(grpc::IAsyncStreamReader<global::Msg.VoiceData> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> VoiceResult(global::Msg.VoiceStr request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> ControlCommand(global::Msg.ControlCmd request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Response> RobotFinished(global::Msg.Response request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MsgServices</summary>
    public partial class MsgServicesClient : grpc::ClientBase<MsgServicesClient>
    {
      /// <summary>Creates a new client for MsgServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MsgServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MsgServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MsgServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MsgServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MsgServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Msg.Response ConfigMap(global::Msg.Map request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Response ConfigMap(global::Msg.Map request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigMap, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> ConfigMapAsync(global::Msg.Map request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> ConfigMapAsync(global::Msg.Map request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigMap, null, options, request);
      }
      public virtual global::Msg.Response RobotPosition(global::Msg.RBPosition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Response RobotPosition(global::Msg.RBPosition request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RobotPosition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> RobotPositionAsync(global::Msg.RBPosition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> RobotPositionAsync(global::Msg.RBPosition request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RobotPosition, null, options, request);
      }
      public virtual global::Msg.Response RobotPath(global::Msg.RBPath request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotPath(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Response RobotPath(global::Msg.RBPath request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RobotPath, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> RobotPathAsync(global::Msg.RBPath request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotPathAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> RobotPathAsync(global::Msg.RBPath request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RobotPath, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Msg.VoiceData, global::Msg.Response> SendVoiceFile(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendVoiceFile(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Msg.VoiceData, global::Msg.Response> SendVoiceFile(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SendVoiceFile, null, options);
      }
      public virtual global::Msg.Response VoiceResult(global::Msg.VoiceStr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoiceResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Response VoiceResult(global::Msg.VoiceStr request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoiceResult, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> VoiceResultAsync(global::Msg.VoiceStr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoiceResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> VoiceResultAsync(global::Msg.VoiceStr request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoiceResult, null, options, request);
      }
      public virtual global::Msg.Response ControlCommand(global::Msg.ControlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Response ControlCommand(global::Msg.ControlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ControlCommand, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> ControlCommandAsync(global::Msg.ControlCmd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ControlCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> ControlCommandAsync(global::Msg.ControlCmd request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ControlCommand, null, options, request);
      }
      public virtual global::Msg.Response RobotFinished(global::Msg.Response request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotFinished(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Response RobotFinished(global::Msg.Response request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RobotFinished, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> RobotFinishedAsync(global::Msg.Response request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotFinishedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Response> RobotFinishedAsync(global::Msg.Response request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RobotFinished, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MsgServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MsgServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MsgServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ConfigMap, serviceImpl.ConfigMap)
          .AddMethod(__Method_RobotPosition, serviceImpl.RobotPosition)
          .AddMethod(__Method_RobotPath, serviceImpl.RobotPath)
          .AddMethod(__Method_SendVoiceFile, serviceImpl.SendVoiceFile)
          .AddMethod(__Method_VoiceResult, serviceImpl.VoiceResult)
          .AddMethod(__Method_ControlCommand, serviceImpl.ControlCommand)
          .AddMethod(__Method_RobotFinished, serviceImpl.RobotFinished).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MsgServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ConfigMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Msg.Map, global::Msg.Response>(serviceImpl.ConfigMap));
      serviceBinder.AddMethod(__Method_RobotPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Msg.RBPosition, global::Msg.Response>(serviceImpl.RobotPosition));
      serviceBinder.AddMethod(__Method_RobotPath, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Msg.RBPath, global::Msg.Response>(serviceImpl.RobotPath));
      serviceBinder.AddMethod(__Method_SendVoiceFile, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Msg.VoiceData, global::Msg.Response>(serviceImpl.SendVoiceFile));
      serviceBinder.AddMethod(__Method_VoiceResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Msg.VoiceStr, global::Msg.Response>(serviceImpl.VoiceResult));
      serviceBinder.AddMethod(__Method_ControlCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Msg.ControlCmd, global::Msg.Response>(serviceImpl.ControlCommand));
      serviceBinder.AddMethod(__Method_RobotFinished, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Msg.Response, global::Msg.Response>(serviceImpl.RobotFinished));
    }

  }
}
#endregion
